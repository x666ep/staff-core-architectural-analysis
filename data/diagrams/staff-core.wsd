@startuml Context

!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Context.puml

    System_Ext(onec, "1C", "Различные ЗУП")
    System_Ext(portal, "Staff Portal", "Портал Стафф")
    System_Ext(accounts, "Accounts", "Система управления УЗ пользователей")
   
    System(core, "Staff Core", "Система обработки кадровых данных")

    SystemQueue(employeeKafka, "Employee Topic", "Топик событий сотрудников")
    SystemQueue(orgKafka, "Org Topic", "Топик событий оргструктур")

    Rel_D(onec, core, "События и данные")
    Rel_D(portal, core, "События")
    Rel_D(accounts, core, "События")

    Rel_D(core, employeeKafka, "События")
    Rel_D(core, orgKafka, "События")

    System_Ext(adSink, "Staff AD Sink", "Система обновления данных из staff в AD")
    System_Ext(jira, "Jira")

    Rel_R(core, jira, "Обновление данных")
    Rel_R(core, adSink, "Блокировка уволенных и Обновление данных")

@enduml

@startuml Container

!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

    System_Ext(onec, "1C", "Различные ЗУП")
    System_Ext(onecGateway, "1C Gateway", "Наш уютненький гейтвейчик к ОдинЭсске")

    System_Ext(portal, "Staff Portal", "Портал Стафф")
    System_Ext(accounts, "Accounts", "Система управления УЗ")


    SystemQueue_Ext(accountKafka, "Account Topic", "Топик УЗ")
    SystemQueue_Ext(gradeOrdersKafka, "Grade Orders Topic", "Топик приказов назначения грейда")
    SystemQueue_Ext(employeeOrdersKafka, "Employee Orders Topic", "Топик приказов найма/увольнения")
    SystemQueue_Ext(employeeInfoKafka, "Employee Info Topic", "Топик данных сотрудников")
    SystemQueue_Ext(portalEventsKafka, "Staff Portal Topic", "Топик событий стаффа")
    SystemQueue_Ext(mapEventsKafka, "Staff Map Topic", "Топик событий карт")


    Rel(onec, gradeOrdersKafka, "Write")
    Rel(onec, employeeOrdersKafka, "Write")
    Rel(onec, employeeInfoKafka, "Write")

    Rel(portal, portalEventsKafka, "Write")
    Rel(portal, mapEventsKafka, "Write")

    Rel_R(accounts, accountKafka, "Write")

    System_Ext(adSink, "Staff AD Sink", "Система обновления данных(и блокировки) сотрудников в AD")
    System_Ext(jira, "Jira")
   

    System_Boundary(staffCore, "Staff Core", "Система обработки кадровых данных") {

        Container(staffCoreApi, "Staff Core API", "", "Основное АПИ обработки событий")

        SystemDb(staffCoreDb, "db_staff_api", "Самая большая головная боль КДП")

        SystemQueue(employeeKafka, "Employee Topic", "Топик событий сотрудников")
        SystemQueue(orgKafka, "Org Topic", "Топик событий оргструктур")


        Rel(accountKafka, staffCoreApi, "Read")
        Rel(gradeOrdersKafka, staffCoreApi, "Read")
        Rel(employeeOrdersKafka, staffCoreApi, "Read")
        Rel(employeeInfoKafka, staffCoreApi, "Read")

        Rel(portalEventsKafka, staffCoreApi, "Read")
        Rel(mapEventsKafka, staffCoreApi, "Read")

        BiRel_D(staffCoreApi, employeeKafka, "Read/Write")
        BiRel_D(staffCoreApi, orgKafka, "Read/Write")
        Rel_L(staffCoreApi, jira, "Write")
        Rel_D(staffCoreDb, adSink, "Read")
        
        BiRel_L(staffCoreApi, staffCoreDb, "Read/Write")

        Rel(staffCoreApi, onecGateway, "Read")
        Rel_R(onecGateway, onec, "Read")
    }


    Rel_D(employeeKafka, accounts, "Read")
    Rel_D(orgKafka, accounts, "Read")


@enduml

@startuml FillChangesFlowHandlers
skinparam ConditionEndStyle hline 
scale max 500 height
    start
        :Запрос к 1С на получение 
        данных по всем сотрудникам;
        :Берем текущие данные сотрудников;
        :Формируем мапу на основе актуальных данных 
        (Ключ гуид сотрудника);
        :Формируем мапу на основе текущих данных 
        (Ключ гуид сотрудника);
        while (Перебираем в цикле мапу актуальных данных)
            if (В текущих данных есть ключ из актуальных) then (yes)
                if (Текущие данные отличаются от актуальных) then (yes)
                :формируем diff 
                кладем его в таблицу *_changes 
                с пометкой необработанно;
                endif
            endif
        endwhile
    stop
@enduml

@startuml FillChangesFlowEmployeeTopic
skinparam ConditionEndStyle hline 
scale max 500 height
    start
        :Получаем событие из кафки;
        :Запрашиваем из БД предыдущее состояние
        из таблицы employee_last_changes_raw;
        if (Предыдущее состояние есть) then (yes)
                :создаем обьект с полями prev_data и data
                наполняем prev_data данными 
                из поля data предыдущего сотояния
                а data наполняется данными из события;
                :построчно сравниваем prev_data и data;
                if (Есть Diff) then (yes)
                    :формируем diff;
                    :кладем его в таблицу employee_changes_raw;
                    :объект сохраняем в таблицу employee_last_changes_raw
                    с пометкой events_created = false;
                endif
               else
                :создаем обьект с полями prev_data и data
                prev_data будет пустым
                а data наполняется данными из события;
                :записываем в таблицу employee_changes_raw 
                новую строчку с полной информацией из ивента;
                :объект сохраняем в таблицу employee_last_changes_raw
                с пометкой events_created = false;
            endif
    stop
@enduml

@startuml FillChangesFlowAccountsTopic
skinparam ConditionEndStyle hline 
scale max 500 height
    start
        :Получаем событие из кафки;
        :Запрашиваем из БД предыдущее состояние
        из таблицы account_last_changes_raw;
        if (Предыдущее состояние есть) then (yes)
                :создаем обьект с полями prev_data и data
                наполняем prev_data данными из поля data предыдущего сотояния
                а data наполняется данными из события;
                :построчно сравниваем prev_data и data;
                if (Есть Diff) then (yes)
                    :формируем diff;
                    :кладем его в таблицу account_changes_raw;
                    :объект сохраняем в таблицу account_last_changes_raw
                    с пометкой events_created = false;
                endif
               else
                :создаем обьект с полями prev_data и data
                prev_data будет пустым
                а data наполняется данными из события;
                :записываем в таблицу account_changes_raw 
                новую строчку с полной информацией из ивента;
                :объект сохраняем в таблицу account_last_changes_raw
                с пометкой events_created = false;
            endif
    stop
@enduml

@startuml FillChangesFlowGradeOrdersTopic
skinparam ConditionEndStyle hline 
scale max 500 height
    start
        :Получаем событие из кафки;
        :Сохраняем в таблицу employee_grade_change_documents_raw;
        :Запрашиваем из таблицы employee_grade_change_documents_raw 
        приказы с тем-же documentID;

        if (Есть документ с таким-же documentId) then (yes)
            if (его version < прилетевшего из кафки) then (yes) 

                if (Это отмена или распровод?) then (yes)
                    :удаляем этот документ из employee_grade_change_documents_actual;
                    else
                    :обновляем в значения в employee_grade_change_documents_actual
                    и устанавливаем version документа из кафки;
                endif
            else
            :скипаем документ;
            endif
            else
            :создаем новую строку employee_grade_change_documents_actual
            со значениями документа из кафки;
        endif
    stop
@enduml

@startuml FillChangesFlowHireOrdersTopic
skinparam ConditionEndStyle hline 
scale max 500 height
    start
        :Получаем событие из кафки;
        :Сохраняем в таблицу employee_hire_changes_raw;
    stop
@enduml

@startuml ProcessHireChangesFlow
skinparam ConditionEndStyle hline 
scale max 500 height
    start
        :Выбираем из таблицы employee_hire_changes_raw 
        все employee_guid необработанных приказов 
        (applied_at IS NULL);
        while (Перебираем в цикле массив employee_guid)
            :для каждого employee_guid
            получаем все его приказы
            (все в тч и не обработанные);
            :вычисляем актуальное состояние на текущую дату 
            (те событие приказа уже наступило)
            применяя приказы последовательно;
            :сохраняем актуальное состояние в
            employee_hire_status_actual;
            :подготавливаем ивент/ивенты для внутреннего топика;
            :кладем наши события в табличку employee_events
            для дальнейшей отправки в kafka;
        endwhile
    stop
@enduml

@startuml ProcessEmployeeUpdatesPg1
skinparam ConditionEndStyle hline 
scale max 500 height
    start
        group Оформление
            :Выбираем из таблицы employee_hire_status_actual 
            все приказы с типом "Найм" 
            и датой оформления (formalized_at) **IS NULL**;
            :К приказам делаем JOIN данных состояний 
            по сотруднику и ФЛ из employee_last_changes_raw 
            которые еще не обработаны;
            while (Перебираем в цикле массив приказов/состояний)
                :делаем UPSERT ФЛ и Сотрудника, при этом
                устанавливаем маркер что сотрудник неактивен;
                :подготавливаем ивент/ивенты для внутреннего топика;
                :кладем наши события в табличку employee_events
                для дальнейшей отправки в kafka;
                :помечаем что приказ на найм - оформлен 
                (дата оформления ставится текущей датой);
            endwhile
        end group
        (A)
@enduml


@startuml ProcessEmployeeUpdatesPg2
skinparam ConditionEndStyle hline 
scale max 500 height
        (A)
        group Обновление
            :Выбираем из таблицы employee_hire_status_actual 
            все приказы с типом "Найм" 
            и датой оформления (formalized_at) **IS NOT NULL**;
            :К приказам делаем JOIN данных состояний 
            по сотруднику и ФЛ из employee_last_changes_raw 
            которые еще не обработаны;
            while (Перебираем в цикле массив приказов/состояний)
                :Проверяем, есть ли ФЛ
                (по СИДУ, если не нашли то по guid ФЛ);
                if (ФЛ Найден) then (yes)
                :Проверяем, есть ли 
                ФЛ руководителя 
                этого сотрудник;
                    if (ФЛ Найден) then (yes)
                        :делаем UPSERT ФЛ и Сотрудника, при этом
                        устанавливаем маркер что сотрудник активен;
                        :подготавливаем ивент/ивенты для внутреннего топика;
                        :кладем наши события в табличку employee_events
                        для дальнейшей отправки в kafka;
                        :помечаем что состояние в таблице 
                        employee_last_changes_raw применено;
                        else
                        :пропускаем сотрудника до следующей итерации;
                    endif
                    else
                    :кидаем ошибку в лог и пропускаем;
                endif
            endwhile
        end group
    stop
@enduml


@startuml ProcessAccountChanges
skinparam ConditionEndStyle hline 
scale max 500 height
    start
        :Выбираем из account_last_changes_raw
        необработанные изменения;
        while (Перебираем в цикле массив изменений)
            :делаем UPSERT данных УЗ;
            :подготавливаем ивент/ивенты для внутреннего топика;
            :кладем наши события в табличку employee_events
            для дальнейшей отправки в kafka;
            :помечаем что состояние в таблице 
            account_last_changes_raw применено;
        endwhile
    stop
@enduml

@startuml ProcessGradeChanges
skinparam ConditionEndStyle hline 
scale max 500 height
    start
        :Выбираем из employee_grade_change_documents_actual
        актуальные на текущую дату приказы;
        :JOIN актуальных грейдов к таблице employees
        с условием что отличается грейд или уровень должности;
        while (Перебираем в цикле массив тех кто "сджойнился")
            :шифруем грейд;
            :подготавливаем ивент/ивенты для внутреннего топика;
            :кладем наши события в табличку employee_events
            для дальнейшей отправки в kafka;
            :обновляем данные по грейду и уровню должности
            в табличке employees;
        endwhile
    stop
@enduml

@startuml ProcessCBParams
skinparam ConditionEndStyle hline 
scale max 500 height
    start
        :Выбираем из табличек *_changes
        не примененные изменения;
        while (Перебираем в цикле массив изменений)
            :подготавливаем ивент/ивенты для внутреннего топика;
            :кладем наши события в табличку employee_events
            для дальнейшей отправки в kafka;
            :обновляем данные в табличке employees;
        endwhile
    stop
@enduml