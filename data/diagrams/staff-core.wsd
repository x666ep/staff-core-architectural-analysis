@startuml Context

!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Context.puml

    System_Ext(onec, "1C", "Различные ЗУП")
    System_Ext(portal, "Staff Portal", "Портал Стафф")
    System_Ext(accounts, "Accounts", "Система управления УЗ пользователей")
   
    System(core, "Staff Core", "Система обработки кадровых данных")

    SystemQueue(employeeKafka, "Employee Topic", "Топик событий сотрудников")
    SystemQueue(orgKafka, "Org Topic", "Топик событий оргструктур")

    Rel_D(onec, core, "События и данные")
    Rel_D(portal, core, "События")
    Rel_D(accounts, core, "События")

    Rel_D(core, employeeKafka, "События")
    Rel_D(core, orgKafka, "События")

    System_Ext(adSink, "Staff AD Sink", "Система обновления данных из staff в AD")
    System_Ext(jira, "Jira")

    Rel_R(core, jira, "Обновление данных")
    Rel_R(core, adSink, "Блокировка уволенных и Обновление данных")

@enduml

@startuml Container

!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

    System_Ext(onec, "1C", "Различные ЗУП")
    System_Ext(onecGateway, "1C Gateway", "Наш уютненький гейтвейчик к ОдинЭсске")

    System_Ext(portal, "Staff Portal", "Портал Стафф")
    System_Ext(accounts, "Accounts", "Система управления УЗ")


    SystemQueue_Ext(accountKafka, "Account Topic", "Топик УЗ")
    SystemQueue_Ext(gradeOrdersKafka, "Grade Orders Topic", "Топик приказов назначения грейда")
    SystemQueue_Ext(employeeOrdersKafka, "Employee Orders Topic", "Топик приказов найма/увольнения")
    SystemQueue_Ext(employeeInfoKafka, "Employee Info Topic", "Топик данных сотрудников")
    SystemQueue_Ext(portalEventsKafka, "Staff Portal Topic", "Топик событий стаффа")
    SystemQueue_Ext(mapEventsKafka, "Staff Map Topic", "Топик событий карт")


    Rel(onec, gradeOrdersKafka, "Write")
    Rel(onec, employeeOrdersKafka, "Write")
    Rel(onec, employeeInfoKafka, "Write")

    Rel(portal, portalEventsKafka, "Write")
    Rel(portal, mapEventsKafka, "Write")

    Rel_R(accounts, accountKafka, "Write")

    System_Ext(adSink, "Staff AD Sink", "Система обновления данных(и блокировки) сотрудников в AD")
    System_Ext(jira, "Jira")
   

    System_Boundary(staffCore, "Staff Core", "Система обработки кадровых данных") {

        Container(staffCoreApi, "Staff Core API", "", "Основное АПИ обработки событий")

        SystemDb(staffCoreDb, "db_staff_api", "Самая большая головная боль КДП")

        SystemQueue(employeeKafka, "Employee Topic", "Топик событий сотрудников")
        SystemQueue(orgKafka, "Org Topic", "Топик событий оргструктур")


        Rel(accountKafka, staffCoreApi, "Read")
        Rel(gradeOrdersKafka, staffCoreApi, "Read")
        Rel(employeeOrdersKafka, staffCoreApi, "Read")
        Rel(employeeInfoKafka, staffCoreApi, "Read")

        Rel(portalEventsKafka, staffCoreApi, "Read")
        Rel(mapEventsKafka, staffCoreApi, "Read")

        BiRel_D(staffCoreApi, employeeKafka, "Read/Write")
        BiRel_D(staffCoreApi, orgKafka, "Read/Write")
        Rel_L(staffCoreApi, jira, "Write")
        Rel_D(staffCoreDb, adSink, "Read")
        
        BiRel_L(staffCoreApi, staffCoreDb, "Read/Write")

        Rel(staffCoreApi, onecGateway, "Read")
        Rel_R(onecGateway, onec, "Read")
    }


    Rel_D(employeeKafka, accounts, "Read")
    Rel_D(orgKafka, accounts, "Read")


@enduml

@startuml FillChangesFlowHandlers
skinparam ConditionEndStyle hline 
scale max 500 height
    start
        :Запрос к 1С на получение 
        данных по всем сотрудникам;
        :Берем текущие данные сотрудников;
        :Формируем мапу на основе актуальных данных 
        (Ключ гуид сотрудника);
        :Формируем мапу на основе текущих данных 
        (Ключ гуид сотрудника);
        while (Перебираем в цикле мапу актуальных данных)
            if (В текущих данных есть ключ из актуальных) then (yes)
                if (Текущие данные отличаются от актуальных) then (yes)
                :формируем diff 
                кладем его в таблицу *_changes 
                с пометкой необработанно;
                endif
            endif
        endwhile
    stop
@enduml

@startuml FillChangesFlowEmployeeTopic
skinparam ConditionEndStyle hline 
scale max 500 height
    start
        :Получаем событие из кафки;
        :Запрашиваем из БД предыдущее состояние
        из таблицы employee_last_changes_raw;
        if (Предыдущее состояние есть) then (yes)
                :создаем обьект с полями prev_data и data
                наполняем prev_data данными из поля data предыдущего сотояния
                а data наполняется данными из события;
                :построчно сравниваем prev_data и data;
                if (Есть Diff) then (yes)
                    :формируем diff;
                    :кладем его в таблицу employee_changes_raw;
                    :объект сохраняем в таблицу employee_last_changes_raw
                    с пометкой events_created = false;
                endif
               else
                :создаем обьект с полями prev_data и data
                prev_data будет пустым
                а data наполняется данными из события;
                :записываем в таблицу employee_changes_raw 
                новую строчку с полной информацией из ивента;
                :объект сохраняем в таблицу employee_last_changes_raw
                с пометкой events_created = false;
            endif
    stop
@enduml

@startuml FillChangesFlowAccountsTopic
skinparam ConditionEndStyle hline 
scale max 500 height
    start
        :Получаем событие из кафки;
        :Запрашиваем из БД предыдущее состояние
        из таблицы account_last_changes_raw;
        if (Предыдущее состояние есть) then (yes)
                :создаем обьект с полями prev_data и data
                наполняем prev_data данными из поля data предыдущего сотояния
                а data наполняется данными из события;
                :построчно сравниваем prev_data и data;
                if (Есть Diff) then (yes)
                    :формируем diff;
                    :кладем его в таблицу account_changes_raw;
                    :объект сохраняем в таблицу account_last_changes_raw
                    с пометкой events_created = false;
                endif
               else
                :создаем обьект с полями prev_data и data
                prev_data будет пустым
                а data наполняется данными из события;
                :записываем в таблицу account_changes_raw 
                новую строчку с полной информацией из ивента;
                :объект сохраняем в таблицу account_last_changes_raw
                с пометкой events_created = false;
            endif
    stop
@enduml